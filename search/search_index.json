{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is a collection of analysis tools to study RNA localization from single molecule FISH (smFISH) images. These tools were developed in context of RNA localization in liver, but can likely be applied for different questions as well. We provide different analysis workflows (listed in the banners). For each we specify the required installations, and detailed Instructions for how run these workflows and what results are typically obtained. Tools \u00b6 We use a different open-source software packages, and detail their usage in the documentation of each workflow. FISH-quant: RNA detection \u00b6 FISH-quant is a Matlab toolbox to localize RNAs in 3D from smFISH images. ImJoy \u00b6 ImJoy is image processing platform with an easy to use interface powered by a Python engine running in the background. ImJoy plays a central role in most analysis workflows. Working with ImJoy \u00b6 We provide links to install the different ImJoy plugins in dedicated ImJoy workspaces . Workspaces can be selected from little puzzle symbol in the upper left part of the interface. Most plugins require the ImJoy Plugin Engine , to perform computations in Python. You will need to install it only once, but launch it each time you work with ImJoy. For more information for how to install and use the plugin engine, please consult the ImJoy documentation . Once installed, ImJoy remembers the workspaces and plugins and you simply have to open the web app and select the appropriate workspace https://imjoy.io/#/app If you press on the installation link, the ImJoy web app will open and display a dialog asking if you want to install the specified plugin. To confirm, press the install button. Jupyter notebooks \u00b6 We also provide Jupyter notebooks for certain Python analysis. To run these notebooks, we recommend using Anaconda with Python 3 . There are many introductions to Jupyter, e.g. here . We further recommend creating a dedicated environment for the Python code to install the code. Note 1: that steps 1, 3, 4 below have to be done only once. Note 2: each time you want to use Jupyter, you have to activate the environment (step 2), and run the notebook (step 5). You can do this from an anaconda terminal Create the environment, , e.g. named rna-loc-liver conda create -n rna-loc-liver python=3.7 Activate the environment : conda activate rna-loc-liver Install the necessary packages to run Jupyter conda install nb_conda Install the analysis package and all required packages pip install git+https://github.com/muellerflorian/walesky-rna-loc-liver Start the Jupyter notebook (best from within the folder containing the notebook). jupyter notebook Make sure that the notebook is running in the specified environment (upper right corner of interface). If not change it from the menu \"Kernel\".","title":"Overview"},{"location":"#tools","text":"We use a different open-source software packages, and detail their usage in the documentation of each workflow.","title":"Tools"},{"location":"#fish-quant-rna-detection","text":"FISH-quant is a Matlab toolbox to localize RNAs in 3D from smFISH images.","title":"FISH-quant: RNA detection"},{"location":"#imjoy","text":"ImJoy is image processing platform with an easy to use interface powered by a Python engine running in the background. ImJoy plays a central role in most analysis workflows.","title":"ImJoy"},{"location":"#working-with-imjoy","text":"We provide links to install the different ImJoy plugins in dedicated ImJoy workspaces . Workspaces can be selected from little puzzle symbol in the upper left part of the interface. Most plugins require the ImJoy Plugin Engine , to perform computations in Python. You will need to install it only once, but launch it each time you work with ImJoy. For more information for how to install and use the plugin engine, please consult the ImJoy documentation . Once installed, ImJoy remembers the workspaces and plugins and you simply have to open the web app and select the appropriate workspace https://imjoy.io/#/app If you press on the installation link, the ImJoy web app will open and display a dialog asking if you want to install the specified plugin. To confirm, press the install button.","title":"Working with ImJoy"},{"location":"#jupyter-notebooks","text":"We also provide Jupyter notebooks for certain Python analysis. To run these notebooks, we recommend using Anaconda with Python 3 . There are many introductions to Jupyter, e.g. here . We further recommend creating a dedicated environment for the Python code to install the code. Note 1: that steps 1, 3, 4 below have to be done only once. Note 2: each time you want to use Jupyter, you have to activate the environment (step 2), and run the notebook (step 5). You can do this from an anaconda terminal Create the environment, , e.g. named rna-loc-liver conda create -n rna-loc-liver python=3.7 Activate the environment : conda activate rna-loc-liver Install the necessary packages to run Jupyter conda install nb_conda Install the analysis package and all required packages pip install git+https://github.com/muellerflorian/walesky-rna-loc-liver Start the Jupyter notebook (best from within the folder containing the notebook). jupyter notebook Make sure that the notebook is running in the specified environment (upper right corner of interface). If not change it from the menu \"Kernel\".","title":"Jupyter notebooks"},{"location":"expression-gradient/","text":"Expression gradient analysis \u00b6 In this workflow, the spatial expression gradient between two reference regions are created. The distances are renormalised such that results from different images can be more easily be compared. As input the workflow requires: FISH-quant results file: created with the with FISH-quant. ImJoy annotation files: annotations of the two reference regions. Summary of analysis workflow \u00b6 The expression gradient is calculated as follows In the analysis, the distance for RNA from the first reference region is calculated (the shortest distance between the RNA and the polygon defining this region). Negative distances mean that the RNA is inside, positive that the RNA is outside. These distances are then renormalised with the shortest distance between the center of mass of the second region and the polygon of the first region. Distances are then summarised in histograms with bins of width 0.1 between the minimum and maximum renormalised distance measurements. These counts are then further renormalised to consider the actual contained area in the image for a given distance. This is done by calculating the distance transform of the image with respect to region 1. These values are treated distance measurements, and treated as described for the RNA distance measurements. The obtained histogram counts are used to normalise the RNA distance counts. Lastly, the histogram is such that frequencies sum up to 1. Required tools \u00b6 ImJoy Plugins \u00b6 These plugins have to be installed only once, after installation they will be available in the dedicated ImJoy workspace: ExpGradient Pressing on the links below, will open ImJoy in your browser (best in Chrome) and allow you to install the required plugins. You will be asked to confirm the installation with a dialog as shown below. After confirmation, the plugins will be installed together with additional auxiliary plugins. `ImageAnnotator: annotate your images. Install from here. ExpGradient : calculate expression gradient. Install from here. Jupyter notebook \u00b6 To perform the calculation of the expression gradients, we also provide a Jupyter notebook expression_gradient.ipynb . This notebook can be found in the folder notebooks . Data \u00b6 Data organisation \u00b6 This workflow requires that data is organised in the following away Each sample (usually a field of view) is in a separate folder. Each folder can contain images of multiple channels. FQ result file are in the same folder. A folder can contain FQ results for different channels. An annotation file with the two reference regions ( annotation.json ). See below for more details. A parental folder contains all sample folders. In the example below, a folder contains the annotations ( annotation.json ), two different channels ( ...(green).tif and ...(red).tif ), the FQ results for both channels ....txt , and an annotation file ( annotation.json ). Please note that you can have only one annotation file per sample folder . You can generate it based on any of the channels, but the same file will be used for all FQ results in this channel. \u251c\u2500 data_for_expression_gradient/ \u2502 \u251c\u2500 sample_1 \u2502 \u2502 \u251c\u2500 annotation.json \u2502 \u2502 \u251c\u2500 sample_1_green_outline_spots_181018.txt \u2502 \u2502 \u251c\u2500 sample_1_green.tif \u2502 \u2502 \u251c\u2500 sample_1_red_outline_spots_181017.txt \u2502 \u2502 \u251c\u2500 sample_1_red.tif \u2502 \u251c\u2500 sample2 \u2502 \u2502 \u251c\u2500 ... Demo data \u00b6 You can find already processed demo data here. ToDo : upon publication, demo data will be moved to Zenodo. Analysis \u00b6 1. RNA detection with FQ \u00b6 Here we refer to the dedicated FQ manuals for how to best perform the RNA detection. 2. Annotation of reference regions \u00b6 This is performed with the Annotator plugin running in ImJoy. To annotate files on your local machine, please make sure that the Python plugin engine is running. It is required to access your local file-system. To annotate your image , follow these steps Open the annotation plugin by clicking on the plugin name ImageAnnotator The plugin will open with a default image and you have to load your own data . Press on the File dropdown menu in the upper right corner Select Import Samples In the new dialog press Choose Files and then Select Local Files . In case your files are on a different drive, you can specify the drive from Options and Go to folder . In the dialog, select the parental folder containing all sample folders. ImJoy will display a dialog saying \"This will upload ....\", confirm. Your data only be \"uploaded\" to your local browser BUT not on an external website. This will populate the interface with all sample folders. For each folder, you see a little icon representing a file being present in the folder. You then have to set a filter on the file-name for the channel which will be read into the Annotator plugin. For this you set a name for the channel, e.g. FISH , and the identifier of this image, e.g. (green).tif . Press Add Channel to add this channel. You then see this channel as an additional entry in the interface. Press Import to open the Annotator with the specified files. You then specify your annotation: from the Annotation dropdown menu, you can specify which annotations you want to do By pressing New Marker you can specify an new annotation type. You can define its name, the colour in which it will show, and what type (use Polygon). For this workflow, you need two annotation types. Please also remember their name, since this will be important for the last analysis step. Once you defined the annotation types, you can annotate your image. Then select which file you want to annotate (from the File dropdown menu), and annotate the two different regions. To annotate, press on one of the annotation types, go to the image, and start annotating. For a polygon, simply press the mouse button, draw your region and release once your are done. Once you are done, you can export the annotations from the Exports dropdown menu and selecting the All annotations option. The annotations will be saved in the default download folder of your browser as a zip file. You can then unzip this file. It contains the same folder structure as your original parental folder. Each sample folder contains a file annotation.json with the annotations that your created for this sample. You can then simply copy the sample folders and paste them in the parental folder containing your data (with Windows explorer or Mac OS finder). When asked if you want to merge the folders, confirm. 3. Calculate density profiles \u00b6 You can run this analysis either with the provided code in the Jupyter notebook, or use ImJoy. With Jupyter notebook \u00b6 Once you have your conda environment installed as described in the Overview section, you can open the Jupyter notebook and analyze your data. You have to execute the first cell to load the necessary code. The second cell allows you to 1. Define the folder containing your data. 2. Defining the labels for the two reference regions that you outlined. Executing the cell, will launch the analysis workflow. described above. Analysis in ImJoy \u00b6 If you use Imjoy , you need to install the Python plugin engine . The first installation might take a bit of time, since the necessary Python environments on the plugin engine are created. Once installed, you will see in the plugin sidebar, before using it, you have to specify the labels of the two reference regions. You can change the default labels by pressing on the arrow down symbol next to the plugin name. In the example below the labels CV and PL are defined for the first and second region, respectively. Then you can press on the plugin name to execute the plugin. In a dialog, you will be asked to specify a folder, please select the parental folder containing the different sample folders. The plugin will then analyse all sample folders containing an annotation file. The regions in this file will then be used to establish the spatial expression gradient between these two regions. Progress is reported in the plugin log (accessible with the 'i' symbol next to the plugin name) and the ImJoy progress bar. Plugin creates results described in section 'Outputs'. 4. Created outputs \u00b6 The function will create a number of result files, which are stored in the subfolder `. For this, it will create a new sub-folder called analysis__exprGradient`. Results files have the full name of the FQ file with the following prefixes _summary_density (PNG file). Contains plots of expression density plots. Cells are filled with pixel values corresponding to their expression level. _summary_gradient (PNG file). Contains summary plots for the spatial gradients between two the two reference points (the first plot shown on this page). hist_expression (tab delimited text file). Contains the spatial expression gradient as a table: 1st col: normalised distance, 2nd col: normalised counts by number of pixels (4th col) 3rd col: RNA counts 4th col: number of pixels in the image within range (for normalisation) img_density (16bit tif file). Contains the expression density plots. The pixel value of the cell corresponds to the number of RNAs in this cell. No outlines are shown. Files can be rendered with Fiji and an adequate look-up table. img_density_outline (16 bit tif file). Contains the expression density plot and the cell outlines. The outlines of the cells are set to the maximum RNA count in the image. This guarantees that the outlines can be seen. img_outline (8 bit image). Outlines of all cells in the image.","title":"Expression gradient"},{"location":"expression-gradient/#expression-gradient-analysis","text":"In this workflow, the spatial expression gradient between two reference regions are created. The distances are renormalised such that results from different images can be more easily be compared. As input the workflow requires: FISH-quant results file: created with the with FISH-quant. ImJoy annotation files: annotations of the two reference regions.","title":"Expression gradient analysis"},{"location":"expression-gradient/#summary-of-analysis-workflow","text":"The expression gradient is calculated as follows In the analysis, the distance for RNA from the first reference region is calculated (the shortest distance between the RNA and the polygon defining this region). Negative distances mean that the RNA is inside, positive that the RNA is outside. These distances are then renormalised with the shortest distance between the center of mass of the second region and the polygon of the first region. Distances are then summarised in histograms with bins of width 0.1 between the minimum and maximum renormalised distance measurements. These counts are then further renormalised to consider the actual contained area in the image for a given distance. This is done by calculating the distance transform of the image with respect to region 1. These values are treated distance measurements, and treated as described for the RNA distance measurements. The obtained histogram counts are used to normalise the RNA distance counts. Lastly, the histogram is such that frequencies sum up to 1.","title":"Summary of analysis workflow"},{"location":"expression-gradient/#required-tools","text":"","title":"Required tools"},{"location":"expression-gradient/#imjoy-plugins","text":"These plugins have to be installed only once, after installation they will be available in the dedicated ImJoy workspace: ExpGradient Pressing on the links below, will open ImJoy in your browser (best in Chrome) and allow you to install the required plugins. You will be asked to confirm the installation with a dialog as shown below. After confirmation, the plugins will be installed together with additional auxiliary plugins. `ImageAnnotator: annotate your images. Install from here. ExpGradient : calculate expression gradient. Install from here.","title":"ImJoy Plugins"},{"location":"expression-gradient/#jupyter-notebook","text":"To perform the calculation of the expression gradients, we also provide a Jupyter notebook expression_gradient.ipynb . This notebook can be found in the folder notebooks .","title":"Jupyter notebook"},{"location":"expression-gradient/#data","text":"","title":"Data"},{"location":"expression-gradient/#data-organisation","text":"This workflow requires that data is organised in the following away Each sample (usually a field of view) is in a separate folder. Each folder can contain images of multiple channels. FQ result file are in the same folder. A folder can contain FQ results for different channels. An annotation file with the two reference regions ( annotation.json ). See below for more details. A parental folder contains all sample folders. In the example below, a folder contains the annotations ( annotation.json ), two different channels ( ...(green).tif and ...(red).tif ), the FQ results for both channels ....txt , and an annotation file ( annotation.json ). Please note that you can have only one annotation file per sample folder . You can generate it based on any of the channels, but the same file will be used for all FQ results in this channel. \u251c\u2500 data_for_expression_gradient/ \u2502 \u251c\u2500 sample_1 \u2502 \u2502 \u251c\u2500 annotation.json \u2502 \u2502 \u251c\u2500 sample_1_green_outline_spots_181018.txt \u2502 \u2502 \u251c\u2500 sample_1_green.tif \u2502 \u2502 \u251c\u2500 sample_1_red_outline_spots_181017.txt \u2502 \u2502 \u251c\u2500 sample_1_red.tif \u2502 \u251c\u2500 sample2 \u2502 \u2502 \u251c\u2500 ...","title":"Data organisation"},{"location":"expression-gradient/#demo-data","text":"You can find already processed demo data here. ToDo : upon publication, demo data will be moved to Zenodo.","title":"Demo data"},{"location":"expression-gradient/#analysis","text":"","title":"Analysis"},{"location":"expression-gradient/#1-rna-detection-with-fq","text":"Here we refer to the dedicated FQ manuals for how to best perform the RNA detection.","title":"1. RNA detection with FQ"},{"location":"expression-gradient/#2-annotation-of-reference-regions","text":"This is performed with the Annotator plugin running in ImJoy. To annotate files on your local machine, please make sure that the Python plugin engine is running. It is required to access your local file-system. To annotate your image , follow these steps Open the annotation plugin by clicking on the plugin name ImageAnnotator The plugin will open with a default image and you have to load your own data . Press on the File dropdown menu in the upper right corner Select Import Samples In the new dialog press Choose Files and then Select Local Files . In case your files are on a different drive, you can specify the drive from Options and Go to folder . In the dialog, select the parental folder containing all sample folders. ImJoy will display a dialog saying \"This will upload ....\", confirm. Your data only be \"uploaded\" to your local browser BUT not on an external website. This will populate the interface with all sample folders. For each folder, you see a little icon representing a file being present in the folder. You then have to set a filter on the file-name for the channel which will be read into the Annotator plugin. For this you set a name for the channel, e.g. FISH , and the identifier of this image, e.g. (green).tif . Press Add Channel to add this channel. You then see this channel as an additional entry in the interface. Press Import to open the Annotator with the specified files. You then specify your annotation: from the Annotation dropdown menu, you can specify which annotations you want to do By pressing New Marker you can specify an new annotation type. You can define its name, the colour in which it will show, and what type (use Polygon). For this workflow, you need two annotation types. Please also remember their name, since this will be important for the last analysis step. Once you defined the annotation types, you can annotate your image. Then select which file you want to annotate (from the File dropdown menu), and annotate the two different regions. To annotate, press on one of the annotation types, go to the image, and start annotating. For a polygon, simply press the mouse button, draw your region and release once your are done. Once you are done, you can export the annotations from the Exports dropdown menu and selecting the All annotations option. The annotations will be saved in the default download folder of your browser as a zip file. You can then unzip this file. It contains the same folder structure as your original parental folder. Each sample folder contains a file annotation.json with the annotations that your created for this sample. You can then simply copy the sample folders and paste them in the parental folder containing your data (with Windows explorer or Mac OS finder). When asked if you want to merge the folders, confirm.","title":"2. Annotation of reference regions"},{"location":"expression-gradient/#3-calculate-density-profiles","text":"You can run this analysis either with the provided code in the Jupyter notebook, or use ImJoy.","title":"3. Calculate density profiles"},{"location":"expression-gradient/#with-jupyter-notebook","text":"Once you have your conda environment installed as described in the Overview section, you can open the Jupyter notebook and analyze your data. You have to execute the first cell to load the necessary code. The second cell allows you to 1. Define the folder containing your data. 2. Defining the labels for the two reference regions that you outlined. Executing the cell, will launch the analysis workflow. described above.","title":"With Jupyter notebook"},{"location":"expression-gradient/#analysis-in-imjoy","text":"If you use Imjoy , you need to install the Python plugin engine . The first installation might take a bit of time, since the necessary Python environments on the plugin engine are created. Once installed, you will see in the plugin sidebar, before using it, you have to specify the labels of the two reference regions. You can change the default labels by pressing on the arrow down symbol next to the plugin name. In the example below the labels CV and PL are defined for the first and second region, respectively. Then you can press on the plugin name to execute the plugin. In a dialog, you will be asked to specify a folder, please select the parental folder containing the different sample folders. The plugin will then analyse all sample folders containing an annotation file. The regions in this file will then be used to establish the spatial expression gradient between these two regions. Progress is reported in the plugin log (accessible with the 'i' symbol next to the plugin name) and the ImJoy progress bar. Plugin creates results described in section 'Outputs'.","title":"Analysis in ImJoy"},{"location":"expression-gradient/#4-created-outputs","text":"The function will create a number of result files, which are stored in the subfolder `. For this, it will create a new sub-folder called analysis__exprGradient`. Results files have the full name of the FQ file with the following prefixes _summary_density (PNG file). Contains plots of expression density plots. Cells are filled with pixel values corresponding to their expression level. _summary_gradient (PNG file). Contains summary plots for the spatial gradients between two the two reference points (the first plot shown on this page). hist_expression (tab delimited text file). Contains the spatial expression gradient as a table: 1st col: normalised distance, 2nd col: normalised counts by number of pixels (4th col) 3rd col: RNA counts 4th col: number of pixels in the image within range (for normalisation) img_density (16bit tif file). Contains the expression density plots. The pixel value of the cell corresponds to the number of RNAs in this cell. No outlines are shown. Files can be rendered with Fiji and an adequate look-up table. img_density_outline (16 bit tif file). Contains the expression density plot and the cell outlines. The outlines of the cells are set to the maximum RNA count in the image. This guarantees that the outlines can be seen. img_outline (8 bit image). Outlines of all cells in the image.","title":"4. Created outputs"},{"location":"licence/","text":"License \u00b6 MIT License Copyright \u00a9 Florian MUELLER Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"licence/#license","text":"MIT License Copyright \u00a9 Florian MUELLER Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}